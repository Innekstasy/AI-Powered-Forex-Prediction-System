Ecco l‚Äôanalisi completa, riga per riga, dello script `target_calculator.py`.

---

## üìÇ **Script**: `target_calculator.py`

**Posizione**: `forex_system/strategy/target_calculator.py`
**Scopo**: Calcolare un indicatore di affidabilit√† per una previsione TP/SL e combinare pi√π previsioni con media pesata.

---

## üîÅ **Funzioni definite**

### 1. `calculate_reliability(tp, sl, last_close, trend)`

**Scopo:**
Restituisce un valore di *affidabilit√†* tra `0.0` e `1.0` che indica quanto TP e SL sono coerenti col trend corrente.

**Input:**

* `tp`: float ‚Üí valore take profit
* `sl`: float ‚Üí valore stop loss
* `last_close`: float ‚Üí ultimo valore di chiusura
* `trend`: string ‚Üí "BULLISH" o altro (trattato come BEARISH)

**Logica:**

* Se TP o SL √® `None` ‚Üí ritorna `0.0`
* Calcolo `pip_size`:

  * 0.0001 se la coppia √® come EURUSD
  * 0.01 se √® una coppia con JPY (prezzo > 3)
* Calcolo soglia in pips: `15 * pip_size`
* Per trend **BULLISH**:

  * `tp_score = (tp - last_close) / pips_threshold` (quanto il TP supera il prezzo attuale)
  * `sl_score = (last_close - sl) / pips_threshold` (quanto il prezzo scende prima dello SL)
* Per trend **BEARISH**:

  * Invertiti TP/SL rispetto al prezzo

**Output:**

* `float` tra 0 e 1 ‚Üí pi√π √® alto, pi√π la configurazione TP/SL √® ‚Äúcoerente‚Äù col trend

---

### 2. `weighted_mean(values, methods, reliabilities, methods_weight)`

**Scopo:**
Fonde pi√π previsioni TP/SL in un unico valore pesato, tenendo conto del metodo e della sua affidabilit√†.

**Input:**

* `values`: lista di valori numerici (es. TP proposti da metodi diversi)
* `methods`: lista di stringhe che indicano la tecnica (es. "ai", "fib", "sr", etc.)
* `reliabilities`: lista di float tra 0 e 1 ‚Üí valore di `calculate_reliability`
* `methods_weight`: dizionario `{method_name: peso}`

**Logica:**

* Filtra tutte le tuple `(value, method, reliability)` dove `value` non √® `None`
* Applica un peso complessivo: `methods_weight[method] * reliability`
* Calcola media pesata e restituisce il valore arrotondato a 5 cifre decimali

**Output:**

* `float` o `None` ‚Üí valore medio pesato o `None` se non ci sono valori validi

---

## üîÑ **Chi chiama questo script**

√à utilizzato all‚Äôinterno della logica decisionale in:

* `final_decision.py`: per calcolare TP e SL finali sulla base di diverse tecniche predittive
* `main.py`: indirettamente, tramite `final_decision.py`

---

## üì§ Output complessivo dello script

* **`calculate_reliability()`** ‚Üí singolo float ‚àà \[0.0, 1.0]
* **`weighted_mean()`** ‚Üí singolo valore numerico TP/SL (float) oppure `None`

---

## ‚úÖ Stato

‚úî Lo script √® compatto, efficiente e funziona come *modulo supporto* per la parte strategica del sistema.
‚úî Non salva file, non stampa output, e non richiede I/O esterni.
‚úî Conforme al design modulare richiesto.

---

Vuoi passare all‚Äôanalisi di `final_decision.py` che √® lo script che utilizza direttamente questo?
